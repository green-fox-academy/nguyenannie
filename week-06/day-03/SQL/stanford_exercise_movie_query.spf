<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>ContentFilters</key>
	<dict/>
	<key>auto_connect</key>
	<true/>
	<key>data</key>
	<data>
	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
	eWB0ZC6E9Bi1Msv0YjEDCb8=
	</data>
	<key>encrypted</key>
	<true/>
	<key>format</key>
	<string>connection</string>
	<key>queryFavorites</key>
	<array/>
	<key>queryHistory</key>
	<array>
		<string>/*Q7: For each student A who likes a student B where the two are not friends, find if they have a friend C in common (who can introduce them!). For all such trios, return the name and grade of A, B, and C. */
SELECT DISTINCT Hs1.name, Hs1.grade, Hs2.name, Hs2.grade, Hs3.name, Hs3.grade
FROM Highschooler Hs1, Highschooler Hs2, Highschooler Hs3, Likes Lk, Friend Fr1, Friend Fr2
WHERE (Hs1.ID = Lk.ID1 AND Hs2.ID = Lk.ID2) AND Hs2.ID NOT IN (
  SELECT ID2
  FROM Friend
  WHERE ID1 = Hs1.ID
) AND (Hs1.ID = Fr1.ID1 AND Hs3.ID = Fr1.ID2) AND (Hs2.ID = Fr2.ID1 AND Hs3.ID = Fr2.ID2)</string>
		<string>/*Q7: For each student A who likes a student B where the two are not friends, find if they have a friend C in common (who can introduce them!). For all such trios, return the name and grade of A, B, and C. */
SELECT DISTINCT Hs1.name, Hs1.grade, Hs2.name, Hs2.grade, Hs3.name, Hs3.grade
FROM Highschooler Hs1, Highschooler Hs2, Highschooler Hs3, Likes Lk, Friend Fr1, Friend Fr2
WHERE (Hs1.ID = Lk.ID1 AND Hs2.ID = Lk.ID2)</string>
		<string>/*Q7: For each student A who likes a student B where the two are not friends, find if they have a friend C in common (who can introduce them!). For all such trios, return the name and grade of A, B, and C. */
SELECT DISTINCT H1.name, H1.grade, H2.name, H2.grade, H3.name, H3.grade
FROM Highschooler H1, Highschooler H2, Highschooler H3, Likes L, Friend F1, Friend F2
WHERE (H1.ID = L.ID1 AND H2.ID = L.ID2) AND H2.ID NOT IN (
  SELECT ID2
  FROM Friend
  WHERE ID1 = H1.ID
) AND (H1.ID = F1.ID1 AND H3.ID = F1.ID2) AND (H2.ID = F2.ID1 AND H3.ID = F2.ID2)</string>
		<string>SELECT fr1.ID1 as fr_id1, fr1.ID2 as fr_id2 FROM Friend as fr1
LEFT JOIN Highschooler as Hs1 ON fr1.ID2 = Hs1.ID
LEFT JOIN Highschooler as Hs2 ON fr1.ID1 = hs2.ID
WHERE hs1.ID &gt; hs2.ID</string>
		<string>SELECT * FROM Likes AS lk 
LEFT JOIN Highschooler as Hs1 ON lk.ID1 = Hs1.ID
LEFT JOIN (SELECT fr1.ID1 as fr_id1, fr1.ID2 as fr_id2 FROM Friend as fr1
LEFT JOIN Highschooler as Hs1 ON fr1.ID2 = Hs1.ID
LEFT JOIN Highschooler as Hs2 ON fr1.ID1 = hs2.ID
WHERE hs1.ID &gt; hs2.ID) AS non_mirrored_friends ON non_mirrored_friends.fr_id1 = Hs1.ID WHERE non_mirrored_friends.fr_id2 IS NOT NULL</string>
		<string>SELECT * FROM Likes AS lk 
LEFT JOIN Highschooler as Hs1 ON lk.ID1 = Hs1.ID
LEFT JOIN (SELECT fr1.ID1 as fr_id1, fr1.ID2 as fr_id2 FROM Friend as fr1
LEFT JOIN Highschooler as Hs1 ON fr1.ID2 = Hs1.ID
LEFT JOIN Highschooler as Hs2 ON fr1.ID1 = hs2.ID
WHERE hs1.ID &gt; hs2.ID) AS non_mirrored_friends ON non_mirrored_friends.fr_id1 = Hs1.ID WHERE non_mirrored_friends.fr_id2 IS NOT NULL AND</string>
		<string>SELECT * FROM Likes AS lk 
LEFT JOIN Highschooler as Hs1 ON lk.ID1 = Hs1.ID
LEFT JOIN Highschooler as Hs2 ON lk.ID2 = Hs2.ID
LEFT JOIN (SELECT fr1.ID1 as fr_id1, fr1.ID2 as fr_id2 FROM Friend as fr1
LEFT JOIN Highschooler as Hs1 ON fr1.ID2 = Hs1.ID
LEFT JOIN Highschooler as Hs2 ON fr1.ID1 = hs2.ID
WHERE hs1.ID &gt; hs2.ID) AS non_mirrored_friends ON non_mirrored_friends.fr_id1 = Hs1.ID WHERE non_mirrored_friends.fr_id2 IS NOT NULL AND hs1.ID &gt; hs2.ID</string>
		<string>SELECT * FROM Likes AS lk 
LEFT JOIN Highschooler as Hs1 ON lk.ID1 = Hs1.ID
LEFT JOIN Highschooler as Hs2 ON lk.ID2 = Hs1.ID
LEFT JOIN (SELECT fr1.ID1 as fr_id1, fr1.ID2 as fr_id2 FROM Friend as fr1
LEFT JOIN Highschooler as Hs1 ON fr1.ID2 = Hs1.ID
LEFT JOIN Highschooler as Hs2 ON fr1.ID1 = hs2.ID
WHERE hs1.ID &gt; hs2.ID) AS non_mirrored_friends ON non_mirrored_friends.fr_id1 = Hs1.ID WHERE non_mirrored_friends.fr_id2 IS NOT NULL AND  hs1.ID &gt; hs2.ID</string>
		<string>SELECT * FROM Likes AS lk 
LEFT JOIN Highschooler as Hs1 ON lk.ID1 = Hs1.ID
LEFT JOIN (SELECT fr1.ID1 as fr_id1, fr1.ID2 as fr_id2 FROM Friend as fr1
LEFT JOIN Highschooler as Hs1 ON fr1.ID2 = Hs1.ID
LEFT JOIN Highschooler as Hs2 ON fr1.ID1 = hs2.ID
WHERE hs1.ID &gt; hs2.ID) AS non_mirrored_friends ON non_mirrored_friends.fr_id2 = Hs1.ID WHERE non_mirrored_friends.fr_id2 IS NOT NULL</string>
		<string>SELECT * FROM Likes AS lk 
LEFT JOIN Highschooler as Hs1 ON lk.ID1 = Hs1.ID
LEFT JOIN Highschooler as Hs2 ON lk.ID2 = Hs1.ID
LEFT JOIN (SELECT fr1.ID1 as fr_id1, fr1.ID2 as fr_id2 FROM Friend as fr1
LEFT JOIN Highschooler as Hs1 ON fr1.ID2 = Hs1.ID
LEFT JOIN Highschooler as Hs2 ON fr1.ID1 = hs2.ID
WHERE hs1.ID &gt; hs2.ID) AS non_mirrored_friends ON non_mirrored_friends.fr_id2 = Hs1.ID WHERE non_mirrored_friends.fr_id2 IS NOT NULL</string>
		<string>SELECT * FROM Likes AS lk 
LEFT JOIN Highschooler as Hs1 ON lk.ID1 = Hs1.ID
LEFT JOIN Highschooler as Hs2 ON lk.ID2 = Hs1.ID
LEFT JOIN (SELECT fr1.ID1 as fr_id1, fr1.ID2 as fr_id2 FROM Friend as fr1
LEFT JOIN Highschooler as Hs1 ON fr1.ID2 = Hs1.ID
LEFT JOIN Highschooler as Hs2 ON fr1.ID1 = hs2.ID
WHERE hs1.ID &gt; hs2.ID) AS non_mirrored_friends ON non_mirrored_friends.fr_id2 = Hs1.ID WHERE non_mirrored_friends.fr_id2 IS NOT NULL 
LEFT JOIN (SELECT fr1.ID1 as fr_id1, fr1.ID2 as fr_id2 FROM Friend as fr1
LEFT JOIN Highschooler as Hs1 ON fr1.ID2 = Hs1.ID
LEFT JOIN Highschooler as Hs2 ON fr1.ID1 = hs2.ID
WHERE hs1.ID &gt; hs2.ID) AS non_mirrored_friend ON non_mirrored_friend.fr_id1 = Hs1.ID WHERE non_mirrored_friend.fr_id1 IS NOT NULL</string>
		<string>SELECT * FROM Likes AS lk 
LEFT JOIN Highschooler as Hs1 ON lk.ID1 = Hs1.ID
LEFT JOIN Highschooler as Hs2 ON lk.ID2 = Hs1.ID
LEFT JOIN (SELECT fr1.ID1 as fr_id1, fr1.ID2 as fr_id2 FROM Friend as fr1
LEFT JOIN Highschooler as Hs1 ON fr1.ID2 = Hs1.ID
LEFT JOIN Highschooler as Hs2 ON fr1.ID1 = hs2.ID
WHERE hs1.ID &gt; hs2.ID) AS non_mirrored_friends ON non_mirrored_friends.fr_id2 = Hs1.ID WHERE non_mirrored_friends.fr_id2 IS NOT NULL 
LEFT JOIN (SELECT fr1.ID1 as fr_id1, fr1.ID2 as fr_id2 FROM Friend as fr1
LEFT JOIN Highschooler as Hs1 ON fr1.ID2 = Hs1.ID
LEFT JOIN Highschooler as Hs2 ON fr1.ID1 = hs2.ID
WHERE hs1.ID &gt; hs2.ID) AS non_mirrored_friends ON non_mirrored_friends.fr_id1 = Hs1.ID WHERE non_mirrored_friends.fr_id1 IS NOT NULL</string>
		<string>SELECT * FROM Likes AS lk 
LEFT JOIN Highschooler as Hs1 ON lk.ID1 = Hs1.ID
LEFT JOIN (SELECT fr1.ID1 as fr_id1, fr1.ID2 as fr_id2 FROM Friend as fr1
LEFT JOIN Highschooler as Hs1 ON fr1.ID2 = Hs1.ID
LEFT JOIN Highschooler as Hs2 ON fr1.ID1 = hs2.ID
WHERE hs1.ID &gt; hs2.ID) AS non_mirrored_friends ON non_mirrored_friends.fr_id2 = Hs1.ID</string>
		<string>SELECT * FROM Likes AS lk 
LEFT JOIN Highschooler as Hs1 ON lk.ID1 = Hs1.ID
LEFT JOIN (SELECT fr1.ID1 as fr_id1, fr1.ID2 as fr_id2 FROM Friend as fr1
LEFT JOIN Highschooler as Hs1 ON fr1.ID2 = Hs1.ID
LEFT JOIN Highschooler as Hs2 ON fr1.ID1 = hs2.ID
WHERE hs1.ID &gt; hs2.ID) AS non_mirrored_friends ON non_mirrored_friends.fr_id1 = Hs1.ID</string>
		<string>SELECT lk.ID1 as lk1, lk.ID2, hs1.name as lk2 FROM Likes AS lk 
LEFT JOIN Highschooler as Hs1 ON lk.ID1 = Hs1.ID</string>
		<string>SELECT lk.ID1 as lk1, lk.ID2 as lk2 FROM Likes AS lk 
LEFT JOIN Highschooler as Hs1 ON lk.ID1 = Hs1.ID</string>
		<string>SELECT lk.ID1 as lk1, lk.ID2 as lk2 FROM Likes AS lk 
LEFT JOIN Highschooler as Hs1 ON lk.ID1 = Hs1.ID
LEFT JOIN (SELECT fr1.ID1 as fr_id1, fr1.ID2 as fr_id2 FROM Friend as fr1
LEFT JOIN Highschooler as Hs1 ON fr1.ID2 = Hs1.ID
LEFT JOIN Highschooler as Hs2 ON fr1.ID1 = hs2.ID
WHERE hs1.ID &gt; hs2.ID) AS non_mirrored_friends ON non_mirrored_friends.fr_id1 = Hs1.ID</string>
		<string>SELECT lk.ID1 as lk1, lk.ID2 as lk2 FROM Likes AS lk 
LEFT JOIN Highschooler as Hs1 ON lk.ID1 = Hs1.ID
LEFT JOIN (SELECT fr1.ID1 as fr_id1, fr1.ID2 as fr_id2 FROM Friend as fr1
LEFT JOIN Highschooler as Hs1 ON fr1.ID2 = Hs1.ID
LEFT JOIN Highschooler as Hs2 ON fr1.ID1 = hs2.ID
WHERE hs1.ID &gt; hs2.ID) AS non_mirrored_friends ON non_mirrored_friends.ID1 = Hs1.ID</string>
		<string>SELECT lk.ID1, lk.ID2 FROM Likes AS lk 
LEFT JOIN (SELECT fr1.ID1 as fr_id1, fr1.ID2 as fr_id2 FROM Friend as fr1
LEFT JOIN Highschooler as Hs1 ON fr1.ID2 = Hs1.ID
LEFT JOIN Highschooler as Hs2 ON fr1.ID1 = hs2.ID
WHERE hs1.ID &gt; hs2.ID) AS non_mirrored_friends ON lk.ID1 = non_mirrored_friends.fr_id1</string>
		<string>SELECT fr1.ID1, fr1.ID2 FROM Friend as fr1
LEFT JOIN Highschooler as Hs1 ON fr1.ID2 = Hs1.ID
LEFT JOIN Highschooler as Hs2 ON fr1.ID1 = hs2.ID
WHERE hs1.ID &gt; hs2.ID</string>
	</array>
	<key>rdbms_type</key>
	<string>mysql</string>
	<key>rdbms_version</key>
	<string>5.7.20</string>
	<key>version</key>
	<integer>1</integer>
</dict>
</plist>
