<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>ContentFilters</key>
	<dict/>
	<key>auto_connect</key>
	<true/>
	<key>data</key>
	<data>
	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
	</data>
	<key>encrypted</key>
	<true/>
	<key>format</key>
	<string>connection</string>
	<key>queryFavorites</key>
	<array/>
	<key>queryHistory</key>
	<array>
		<string>/*Find the number of students who are either friends with Cassandra or are friends of friends of Cassandra. Do not count Cassandra, even though technically she is a friend of a friend. */
SELECT COUNT(ID2) FROM Friend 
WHERE ID2 IN (SELECT tb.b FROM
(SELECT Hs1.ID as a, Hs2.ID as b FROM Friend AS Fr
	JOIN Highschooler AS Hs1 ON Fr.ID1 = Hs1.ID
	JOIN Highschooler AS Hs2 ON Fr.ID2 = Hs2.ID
	WHERE Hs1.name = "Cassandra") as tb)</string>
		<string>(SELECT ID1, COUNT(ID2) AS fr_count FROM Friend
	GROUP BY ID1)</string>
		<string>/*Find the number of students who are either friends with Cassandra or are friends of friends of Cassandra. Do not count Cassandra, even though technically she is a friend of a friend. */
SELECT Hs1.ID, Hs2.ID FROM Friend AS Fr
	JOIN Highschooler AS Hs1 ON Fr.ID1 = Hs1.ID
	JOIN Highschooler AS Hs2 ON Fr.ID2 = Hs2.ID
	WHERE Hs1.name = "Cassandra"</string>
		<string>/*Find the number of students who are either friends with Cassandra or are friends of friends of Cassandra. Do not count Cassandra, even though technically she is a friend of a friend. */

SELECT COUNT(hs2id) FROM tb1
	(SELECT Hs1.ID AS hs1id, Hs2.ID AS hs2id FROM Friend AS Fr
		JOIN Highschooler AS Hs1 ON Fr.ID1 = Hs1.ID
		JOIN Highschooler AS Hs2 ON Fr.ID2 = Hs2.ID
		WHERE Hs1.name = "Cassandra") AS tb1
	GROUP BY tb1.hs1id</string>
		<string>/*Find the number of students who are either friends with Cassandra or are friends of friends of Cassandra. Do not count Cassandra, even though technically she is a friend of a friend. */

SELECT COUNT(hs2id) FROM tb1
	(SELECT Hs1.ID as hs1id, Hs2.ID AS hs2id FROM Friend AS Fr
		JOIN Highschooler AS Hs1 ON Fr.ID1 = Hs1.ID
		JOIN Highschooler AS Hs2 ON Fr.ID2 = Hs2.ID
		WHERE Hs1.name = "Cassandra") AS tb1
	GROUP BY tb1.hs1id</string>
		<string>/*Find the number of students who are either friends with Cassandra or are friends of friends of Cassandra. Do not count Cassandra, even though technically she is a friend of a friend. */

SELECT COUNT(hs2id) FROM tb1
	(SELECT Hs1.ID as hs1id, Hs2.ID hs2id FROM Friend AS Fr
		JOIN Highschooler AS Hs1 ON Fr.ID1 = Hs1.ID
		JOIN Highschooler AS Hs2 ON Fr.ID2 = Hs2.ID
		WHERE Hs1.name = "Cassandra") AS tb1
	GROUP BY tb1.hs1id</string>
		<string>/*Find the number of students who are either friends with Cassandra or are friends of friends of Cassandra. Do not count Cassandra, even though technically she is a friend of a friend. */
SELECT Hs1.ID, Hs2.ID FROM Friend AS Fr
JOIN Highschooler AS Hs1 ON Fr.ID1 = Hs1.ID
JOIN Highschooler AS Hs2 ON Fr.ID2 = Hs2.ID
WHERE Hs1.name = "Cassandra"</string>
		<string>/*Find the number of students who are either friends with Cassandra or are friends of friends of Cassandra. Do not count Cassandra, even though technically she is a friend of a friend. */
SELECT * FROM Friend AS Fr
JOIN Highschooler AS Hs1 ON Fr.ID1 = Hs1.ID
JOIN Highschooler AS Hs2 ON Fr.ID2 = Hs2.ID
WHERE Hs1.name = "Cassandra"</string>
		<string>/*Find the number of students who are either friends with Cassandra or are friends of friends of Cassandra. Do not count Cassandra, even though technically she is a friend of a friend. */
SELECT * FROM Friend AS Fr
JOIN Highschooler AS Hs1 ON Fr.ID1 = Hs1.ID
JOIN Highschooler AS Hs2 ON Fr.ID2 = Hs2.ID
WHERE Hs.name = "Cassandra"</string>
		<string>/*Find the number of students who are either friends with Cassandra or are friends of friends of Cassandra. Do not count Cassandra, even though technically she is a friend of a friend. */
SELECT * FROM Friend AS Fr
JOIN Highschooler AS Hs1 ON Fr.ID1 = Hs1.ID
JOIN Highshooler AS Hs2 ON Fr.ID2 = Hs2.ID
WHERE Hs.name = "Cassandra"</string>
		<string>/*Find the number of students who are either friends with Cassandra or are friends of friends of Cassandra. Do not count Cassandra, even though technically she is a friend of a friend. */
SELECT * FROM Friend AS Fr
JOIN Highschooler AS Hs1 ON Fr.ID1 = Hs1.ID
JOIN Highshool AS Hs2 ON Fr.ID2 = Hs2.ID
WHERE Hs.name = "Cassandra"</string>
		<string>/*Find the number of students who are either friends with Cassandra or are friends of friends of Cassandra. Do not count Cassandra, even though technically she is a friend of a friend. */
SELECT * FROM Friend AS Fr
JOIN Highschooler AS Hs ON Fr.ID1 = Hs.ID
WHERE Hs.name = "Cassandra"</string>
		<string>/*Find the number of students who are either friends with Cassandra or are friends of friends of Cassandra. Do not count Cassandra, even though technically she is a friend of a friend. */
SELECT * FROM Friend AS Fr
JOIN Highschooler AS Hs ON Fr.ID1 = Hs.ID</string>
		<string>/*Find the number of students who are either friends with Cassandra or are friends of friends of Cassandra. Do not count Cassandra, even though technically she is a friend of a friend. */
SELECT * FROM Friend AS Fr
JOIN Highschooler AS Hs WHERE Fr.ID1 = Hs.ID</string>
		<string>/*Find the number of students who are either friends with Cassandra or are friends of friends of Cassandra. Do not count Cassandra, even though technically she is a friend of a friend. */

SELECT ID2 FROM Friend WHERE ID1 = 1709</string>
		<string>/*Find the number of students who are either friends with Cassandra or are friends of friends of Cassandra. Do not count Cassandra, even though technically she is a friend of a friend. */
SELECT ID2 FROM Friend WHERE ID1 = 1079</string>
		<string>/*Find the number of students who are either friends with Cassandra or are friends of friends of Cassandra. Do not count Cassandra, even though technically she is a friend of a friend. */
(SELECT ID1, COUNT(ID2) AS fr_count FROM Friend
	GROUP BY ID1)</string>
		<string>/*What is the average number of friends per student? (Your result should be just one number.) */
	SELECT AVG(friend_num.fr_count) FROM 
	(SELECT ID1, COUNT(ID2) AS fr_count FROM Friend
	GROUP BY ID1) AS friend_num</string>
		<string>/*What is the average number of friends per student? (Your result should be just one number.) */
	SELECT AVG(fr_num.fr_count) FROM 
	(SELECT ID1, COUNT(ID2) AS fr_count FROM Friend
	GROUP BY ID1) AS friend_num</string>
		<string>/*What is the average number of friends per student? (Your result should be just one number.) */
SELECT ID1, COUNT(ID2) FROM Friend
GROUP BY ID1</string>
	</array>
	<key>rdbms_type</key>
	<string>mysql</string>
	<key>rdbms_version</key>
	<string>5.7.20</string>
	<key>version</key>
	<integer>1</integer>
</dict>
</plist>
