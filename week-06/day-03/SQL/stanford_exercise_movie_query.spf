<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>ContentFilters</key>
	<dict/>
	<key>auto_connect</key>
	<true/>
	<key>data</key>
	<data>
	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
	EhkxLjR+Ivi0uf5D
	</data>
	<key>encrypted</key>
	<true/>
	<key>format</key>
	<string>connection</string>
	<key>queryFavorites</key>
	<array/>
	<key>queryHistory</key>
	<array>
		<string>/*Q11: Find the movie(s) with the lowest average rating. Return the movie title(s) and average rating. (Hint: This query is more difficult to write in SQLite than other systems; you might think of it as finding the highest average rating and then choosing the movie(s) with that average rating.) */
SELECT a.t, a.avg_rating FROM (
	SELECT Movie.title as t, AVG(stars) AS avg_rating
			FROM Rating AS rate
			JOIN Movie ON rate.mID = Movie.mID
			GROUP BY Movie.title) AS a
			WHERE a.avg_rating = 
				(SELECT MIN(a.avg_rating) FROM 
				(SELECT AVG(stars) AS avg_rating
				FROM Rating AS rate
				JOIN Movie ON rate.mID = Movie.mID
				GROUP BY Movie.title) AS a)</string>
		<string>/*Find the movie(s) with the highest average rating. Return the movie title(s) and average rating. (Hint: This query is more difficult to write in SQLite than other systems; you might think of it as finding the highest average rating and then choosing the movie(s) with that average rating.) */
SELECT a.t, a.avg_rating FROM (
	SELECT Movie.title as t, AVG(stars) AS avg_rating
			FROM Rating AS rate
			JOIN Movie ON rate.mID = Movie.mID
			GROUP BY Movie.title) AS a
			WHERE a.avg_rating = 
				(SELECT MAX(a.avg_rating) FROM 
				(SELECT AVG(stars) AS avg_rating
				FROM Rating AS rate
				JOIN Movie ON rate.mID = Movie.mID
				GROUP BY Movie.title) AS a)</string>
		<string>/*For each director, return the director's name together with the title(s) of the movie(s) they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL. */

SELECT DISTINCT Movie.director, MAX(Rating.stars) FROM Movie
	LEFT JOIN Rating ON Movie.mID = Rating.mID
	WHERE Movie.director IS NOT NULL
	GROUP BY Movie.director</string>
		<string>/*For each director, return the director's name together with the title(s) of the movie(s) they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL. */
SELECT DISTINCT Movie.director, AVG(Rating.stars) FROM Movie
	LEFT JOIN Rating ON Movie.mID = Rating.mID
	WHERE Movie.director IS NOT NULL
	GROUP BY Movie.director</string>
		<string>/*For each director, return the director's name together with the title(s) of the movie(s) they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL. */
SELECT DISTINCT Movie.title, Movie.director, AVG(Rating.stars) FROM Movie
	LEFT JOIN Rating ON Movie.mID = Rating.mID
	WHERE Movie.director IS NOT NULL
	GROUP BY Movie.director</string>
		<string>/*For each director, return the director's name together with the title(s) of the movie(s) they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL. */
SELECT DISTINCT Movie.title, Movie.director FROM Movie
	LEFT JOIN Rating ON Movie.mID = Rating.mID
	WHERE Movie.director IS NOT NULL</string>
		<string>/*For each director, return the director's name together with the title(s) of the movie(s) they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL. */
SELECT Movie.title, Movie.director FROM Movie
	LEFT JOIN Rating ON Movie.mID = Rating.mID
	WHERE Movie.director IS NOT NULL</string>
		<string>/*For each director, return the director's name together with the title(s) of the movie(s) they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL. */
SELECT Movie.title, Movie.director FROM Rating
	LEFT JOIN Movie ON Movie.mID = Rating.mID
	WHERE Movie.director IS NOT NULL</string>
		<string>/*For each director, return the director's name together with the title(s) of the movie(s) they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL. */
SELECT Movie.title, Movie.director FROM Rating
	JOIN Movie ON Movie.mID = Rating.mID
	WHERE Movie.director IS NOT NULL</string>
		<string>/*For each director, return the director's name together with the title(s) of the movie(s) they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL. */
SELECT DISTINCT Movie.title, Movie.director FROM Rating
	JOIN Movie ON Movie.mID = Rating.mID
	WHERE Movie.director IS NOT NULL</string>
		<string>/*For each director, return the director's name together with the title(s) of the movie(s) they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL. */
SELECT DISTINCT Movie.director, Movie.title FROM Rating
	JOIN Movie ON Movie.mID = Rating.mID
	WHERE Movie.director IS NOT NULL</string>
		<string>/*For each director, return the director's name together with the title(s) of the movie(s) they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL. */
SELECT Movie.director, Movie.title FROM Rating
	JOIN Movie ON Movie.mID = Rating.mID
	WHERE Movie.director IS NOT NULL</string>
		<string>/*For each director, return the director's name together with the title(s) of the movie(s) they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL. */
SELECT Movie.director, Movie.title FROM Rating
	JOIN Movie ON Movie.mID = Rating.mID</string>
		<string>/*For each director, return the director's name together with the title(s) of the movie(s) they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL. */
SELECT director, title FROM Movie</string>
		<string>/*For each director, return the director's name together with the title(s) of the movie(s) they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL. */
SELECT director, title FROM Movies</string>
		<string>/*Find the movie(s) with the highest average rating. Return the movie title(s) and average rating. (Hint: This query is more difficult to write in SQLite than other systems; you might think of it as finding the highest average rating and then choosing the movie(s) with that average rating.) */
SELECT a.t, a.avg_rating FROM (
	SELECT Movie.title as t, AVG(stars) AS avg_rating
			FROM Rating AS rate
			JOIN Movie ON rate.mID = Movie.mID
			GROUP BY Movie.title) AS a
			WHERE a.avg_rating = 
				(SELECT MIN(a.avg_rating) FROM 
				(SELECT AVG(stars) AS avg_rating
				FROM Rating AS rate
				JOIN Movie ON rate.mID = Movie.mID
				GROUP BY Movie.title) AS a)</string>
		<string>SELECT AVG(stars) AS avg_rating
				FROM Rating AS rate
				JOIN Movie ON rate.mID = Movie.mID</string>
		<string>(SELECT AVG(stars) AS avg_rating
				FROM Rating AS rate
				JOIN Movie ON rate.mID = Movie.mID) AS a)</string>
		<string>(SELECT MIN(a.avg_rating) FROM 
				(SELECT AVG(stars) AS avg_rating
				FROM Rating AS rate
				JOIN Movie ON rate.mID = Movie.mID) AS a)</string>
		<string>/*Find the movie(s) with the highest average rating. Return the movie title(s) and average rating. (Hint: This query is more difficult to write in SQLite than other systems; you might think of it as finding the highest average rating and then choosing the movie(s) with that average rating.) */
SELECT a.t, a.avg_rating FROM (
	SELECT Movie.title as t, AVG(stars) AS avg_rating
			FROM Rating AS rate
			JOIN Movie ON rate.mID = Movie.mID
			GROUP BY Movie.title) AS a
			WHERE a.avg_rating = 
				(SELECT MIN(a.avg_rating) FROM 
				(SELECT AVG(stars) AS avg_rating
				FROM Rating AS rate
				JOIN Movie ON rate.mID = Movie.mID) AS a)</string>
	</array>
	<key>rdbms_type</key>
	<string>mysql</string>
	<key>rdbms_version</key>
	<string>5.7.20</string>
	<key>version</key>
	<integer>1</integer>
</dict>
</plist>
